package part1.lesson05.task01.pets;

import part1.lesson05.task01.person.Person;

import java.util.Objects;
import java.util.UUID;

/**
 * Pet
 * <p>
 * Describes pet via uuid, name, owner, weight.
 * uuid - autogenerated.
 * uuid and name are final fields.
 * Implements interface Comparable.
 *
 * @author Ekaterina Belolipetskaya
 */
public class Pet implements Comparable<Pet> {
    private final UUID uuid;
    private final String name;
    private Person owner;
    private int weight;

    public Pet(String name) {
        this.uuid = UUID.randomUUID();
        this.name = name;
    }

    public Pet(String name, Person owner, int weight) {
        this.uuid = UUID.randomUUID();
        this.name = name;
        this.owner = owner;
        this.weight = weight;
    }

    public UUID getUuid() {
        return uuid;
    }

    public String getName() {
        return name;
    }

    public Person getOwner() {
        return owner;
    }

    public void setOwner(Person owner) {
        this.owner = owner;
    }

    public int getWeight() {
        return weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Pet)) return false;
        Pet pet = (Pet) o;
        return uuid.equals(pet.uuid) &&
                Objects.equals(name, pet.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uuid, name);
    }

    @Override
    public String toString() {
        return "Pet{" +
                ", name='" + name + '\'' +
                ", owner=" + owner +
                ", weight=" + weight +
                "}" + System.lineSeparator();
    }

    /**
     * Comparison based on the next algorithm:
     * <p>
     * -sort by owner
     * -sort by pets name
     * -sort by pets weight
     *
     * @param pet - the object to be compared.
     * @return a negative integer, zero, or a positive integer as this object
     * is less than, equal to, or greater than the specified object.
     */
    @Override
    public int compareTo(Pet pet) {
        if (this == pet) return 0;

        if (owner.compareTo(pet.owner) < 0) return 3;
        if (owner.compareTo(pet.owner) > 0) return -3;

        if (name.compareTo(pet.name) > 0) return 2;
        if (name.compareTo(pet.name) < 0) return -2;

        if (weight > pet.weight) return 1;
        if (weight < pet.weight) return -1;

        return 0;
    }
}
